# 9.4 Practice: 与我们的知识库初次相遇

::: {.callout-caution title="依赖项安装" icon="fas fa-download"}
本次实践需要使用 `PyPDF2` 库来读取PDF文档。如果你的环境中尚未安装，请运行以下命令：

```bash
#| eval: false
pip install PyPDF2
```
:::

## **Practice: 对私有知识库的第一次“侦察”**

我们已经绘制了宏伟的RAG蓝图，也理解了其核心概念。现在，在投入具体的组件开发之前，我们必须先对自己将要处理的“原材料”——我们的私有知识库——有一个清晰、直观的认识。

这个环节就像在建造一座大厦前，地质勘探工程师必须先要钻探、取样，了解地下的土质、岩层和水位。没有这一步，后续所有的设计和施工都可能是空中楼阁。

我们的项目将使用一系列关于 **Llama 3** 的技术文档作为我们的核心知识库。你的第一个动手实践任务就是：**在AI的帮助下，加载这些文档，并对它们进行一次全面的探索性数据分析（EDA）。**

---

### **AI指令剧本：非结构化文本的探索性分析**

::: {.callout-note title="动手挑战：指挥AI完成PDF文档的EDA"}

**任务**: 打开你的Jupyter Notebook，向你的AI助手下达指令，让它为你编写一段Python代码，来加载并分析我们知识库中的PDF文件。

**👉 你的指令剧本：**

> **# 角色**
> 你是一位精通使用Python处理PDF文件和进行文本分析的数据科学家。
>
> **# 上下文**
> 我正在启动一个RAG项目，我的知识库是一系列存放在`./data/llama3_docs/`目录下的PDF文档。在进行文本分块和向量化之前，我需要对这些原始文档进行一次探索性数据分析（EDA），以了解它们的基本特性。
>
> **# 任务**
> 请帮我编写一段Python代码，完成以下所有任务：
>
> 1.  **导入必要的库**：`os`, `PyPDF2`, `pandas`, `matplotlib`, `seaborn`。
> 2.  **遍历与加载**：
>     *   编写一个函数，接收一个PDF文件路径作为输入，使用`PyPDF2`库读取所有页面的文本内容，并将它们合并成一个单一的字符串返回。
>     *   遍历`./data/llama3_docs/`目录下的所有`.pdf`文件，对每个文件调用上述函数，将文件名和提取出的完整文本内容存储起来。
> 3.  **数据组织**: 将所有文档的文件名、提取的文本和文本的字符数，存储在一个Pandas DataFrame中。
> 4.  **描述性统计**:
>     *   打印DataFrame的头部信息。
>     *   计算并打印知识库的总体统计数据：文档总数、总字符数。
>     *   计算并打印单个文档字符数的描述性统计信息（平均值、中位数、标准差、最小值、最大值）。
> 5.  **数据可视化**:
>     *   使用`matplotlib`和`seaborn`绘制一个直方图（Histogram）和一个箱形图（Box Plot），来可视化文档长度（字符数）的分布。这对于我们后续决定如何对文本进行分块（Chunking）至关重要。
>
> **# 输出格式**
> 提供一段完整的、可以直接运行的、带有清晰注释的Python代码。

:::

---

## 本节小结

恭喜你完成了与我们知识库的“第一次亲密接触”！现在，我们对即将处理的数据不再一无所知。

### 🎯 核心收获
1.  **数据加载与组织**: 你学会了如何指挥AI遍历文件目录，使用`PyPDF2`等工具从PDF这样的非结构化文件中提取纯文本，并将其组织成结构化的Pandas DataFrame。
2.  **量化分析**: 你掌握了对文本文档集进行基础量化分析的方法，包括计算文档总数、总字符数以及长度的描述性统计。
3.  **可视化洞察**: 你学会了通过绘制直方图和箱形图来可视化文档长度的分布，这为你后续制定文本分块策略提供了关键的数据支持。

### 🤔 为何重要
在任何机器学习项目开始之前，对原始数据进行探索性数据分析（EDA）都是不可或缺的一步。它让你从一开始就基于数据做出决策，而不是凭空猜测。今天获得的关于**文档长度分布**的洞察，将直接影响我们在下一章中技术决策的质量。 