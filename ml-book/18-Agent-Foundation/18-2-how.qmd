# 18.2 How: 与AI一起构思Agent的"身体"

::: {.callout-note title="与AI的探索之旅"}

**你：** "这个想法太酷了！让AI自己去查库存，而不是仅仅依赖它记忆的知识。要实现这个功能，我们需要做些什么？"

**AI助手：** "很高兴你对这个方向感到兴奋！为了让我们的LLM'大脑'能够行动起来，我们需要为它构建一个'身体'和一套'行为准则'。这套体系就是我们常说的'Agent'。一个最基础的Agent包含三个核心要素："
> "1.  **大脑 (Brain):** 这就是我们已经训练好的LLM。它是思考和决策的核心。
> "2.  **工具 (Tools):** 这就是AI的'手'和'脚'。它们是AI能够调用的、能与外部世界交互的函数。比如，`check_inventory()`就是一个工具。
> "3.  **行动循环 (Action Loop):** 这是'行为准则'。它告诉'大脑'应该如何使用'工具'来完成任务。最经典的一个循环被称为'**ReAct**'，是'**Reasoning(思考)**'和'**Acting(行动)**'的缩写。"

**你：** "ReAct？听起来很有意思。它具体是怎么工作的？"

**AI助手：** "非常好！ReAct框架就像是给AI安装了一个'操作系统'。当AI收到一个任务时，它会不断地重复以下三个步骤："
> "**1. 思考 (Thought):** AI首先会'自言自语'，分析当前的任务，并决定下一步应该做什么。比如：'用户在问库存，我应该使用`check_inventory`这个工具'。"
> "**2. 行动 (Action):** AI决定调用某个工具，并为这个工具提供参数。比如：`check_inventory(bean_type='奇旅拼配')`。"
> "**3. 观察 (Observation):** AI执行工具后，会得到一个结果，比如'库存剩余57件'。这就是它的'观察'。"
>
> "然后，AI会带着这个新的'观察'结果，回到第一步，开始新一轮的'思考'。比如：'我已经知道库存是57件了，现在我应该把这个信息礼貌地告诉用户。' 接着，它可能会执行一个`reply_to_user()`的行动。这个循环会一直持续，直到任务完成。"

**你：** "我明白了！所以，Agent的本质就是一个'思考->行动->观察'的循环体。我们要做的，就是为它提供'大脑'（LLM），定义好它能用的'工具'（Python函数），然后用一个框架把这个循环搭建起来。"

**AI助手：** "完全正确！而`LangChain`和`LangGraph`就是目前最强大、最流行的，用来搭建这个'行动循环'的框架。`LangChain`提供了丰富的工具和组件，而`LangGraph`则让我们能用'流程图'的方式，非常直观地定义和连接Agent的每一步行动，即使是后面更复杂的'AI团队协作'，也能清晰地构建出来。"

::: 