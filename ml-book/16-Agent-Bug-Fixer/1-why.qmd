---
title: "16.1 Why: 思想飞跃——从“模型”到“智能体(Agent)”"
---

## 你设计的不再是“模型”，而是“实体”

**【AI导演】**

> **场景**: 在我们一头扎进代码之前，必须先完成一次关键的认知升级。你可能觉得，我们即将构建的，只不过是另一个更复杂的“模型”而已。这是一个普遍的误解。
>
> 我们需要清晰地界定“模型 (Model)”和“智能体 (Agent)”这两个概念。它们代表了两种截然不同的设计哲学和目标。



### 模型 (Model): 一个专业的“回答机器”

到目前为止，我们构建的所有东西，本质上都是“模型”。

-   **AIGC质检分类器**: 这是一个**模型**。它的工作是接收一段文本，然后输出一个分类标签（“优质”、“低质”或“有害”）。它是一个特定任务的专家，一个高效的“回答机器”。
-   **RAG问答系统中的LLM**: 这也是一个**模型**。它接收一个精心构造的Prompt（包含了上下文和问题），然后输出一段回答。

**模型的特点是：**

-   **被动 (Passive)**: 它从不主动发起任何事。它只是等待输入，然后给出输出。
-   **无状态 (Stateless, in a broader sense)**: 它不记忆两次独立调用之间的历史。你问它一个问题，再问一个，它不会记得前一个问题的内容（除非你把历史作为新的输入提供给它）。
-   **单一任务 (Single-Task Oriented)**: 它被训练来做好一件特定的事，比如分类或生成。
-   **世界观**: 它的世界就是一次“输入-输出”的交互。

你可以把“模型”想象成一个**功能强大的计算器**。你输入 `2+2`，它输出 `4`。它极其高效和准确，但它永远不会主动去思考“我为什么要做这个计算？”或者“计算完之后我该做什么？”。

### 智能体 (Agent): 一个有目标的“行动实体”

而我们本章要构建的“智能体”，则是一个完全不同的物种。

**智能体的特点是：**

-   **主动 (Proactive)**: 它拥有一个**目标 (Goal)**，并会为了达成这个目标而**主动地**采取一系列行动。
-   **有状态 (Stateful)**: 它必须感知并记忆自己所处的**环境状态 (Environment State)**。它知道“现在项目测试失败了，错误信息是XXX”，这个状态会指导它的下一步行动。
-   **多任务整合 (Multi-Task Capable)**: 它不是执行单一任务，而是通过**调用多个工具（包括模型）**来完成一个复杂的、多步骤的流程。
-   **世界观**: 它的世界是一个**持续的、交互式的循环 (Loop)**。它不断地`观察 -> 思考 -> 行动 -> 观察结果`，直到目标达成。

你可以把“智能体”想象成一个**被派去修理航天器的机器人**。

1.  **目标**: 它的最终目标是让航天器恢复正常。
2.  **观察**: 它首先要运行诊断程序（**观察环境**），发现“太阳能电池板未展开”（**当前状态**）。
3.  **思考**: 它的大脑（**策略**）开始思考：“我应该先尝试重启系统，还是直接派出机械臂？”
4.  **行动**: 它选择了一个行动：**调用“重启系统”这个工具**。
5.  **观察结果**: 它再次运行诊断程序（**新的观察**），发现重启失败了。
6.  **再次思考**: 它更新了自己的认知：“重启没用。现在我应该尝试派出机械臂。”
7.  **新的行动**: 它调用了“派出机械臂”这个工具。

这个机器人本身可能不擅长制造机械臂，但它知道**何时 (When)**、**为何 (Why)** 以及 **如何 (How)** 去**使用 (Use)** “机械臂”这个工具。


> **学习者笔记**:
>
> | 特征 | 模型 (Model) | 智能体 (Agent) |
> | :--- | :--- | :--- |
> | **角色** | 回答者 (Answerer) | 行动者 (Actor) |
> | **驱动力** | 输入 (Input-driven) | 目标 (Goal-driven) |
> | **工作模式** | 一次性计算 | 持续性循环 |
> | **与工具关系**| **是**一种工具 | **使用**多种工具 |
>
> 在我们的Bug修复项目中，**大语言模型（LLM）不再是主角，它降级成了一种强大的工具**，被我们的Agent在需要“头脑风暴”或“代码建议”时进行调用。
>
> 主角，是那个负责整个修复流程、决定在什么时候该调用什么工具的**Agent本身**。
>
> 理解这个区别，是你从“模型构建者”向“系统设计师”转变的开始。在下一节，我们将开始为我们的Agent设计它的“世界”——一个代码沙盒环境。 