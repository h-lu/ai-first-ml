# 实践：AI辅助重构多Agent系统

理论学习已经结束，现在，让我们卷起袖子，将之前章节创建的多Agent系统原型，进行一次彻底的“升级改造”。这将是你作为“AI指挥家”的毕业作品。

## 我们的起点：一个强大的“大泥球”

我们的起点，是一个功能已经验证、但代码结构混乱的Jupyter Notebook文件。我们假设这个文件名为`multi_agent_prototype.ipynb`，其中包含了我们之前章节编写的所有代码：
-   模型和工具的初始化
-   Supervisor, Customer Service, Finance等多个Agent的定义和Prompt
-   LangGraph工作流的构建和编译
-   最后，一个调用工作流并打印结果的单元格

这是一个典型的“大泥球”，虽然能滚，但又大又重又丑陋。

## 第一步：让AI成为你的架构师

我们自己动手去拆分这个大泥球，很容易出错或遗漏。不如先让我们的AI副驾驶，为我们生成一份清晰的“重构蓝图”。

```{python}
#| echo: true
#| eval: false

# 这是一个模拟的AI Prompt，你可以在一个空的Jupyter Notebook或者直接在你的Copilot Chat中运行它
# 在实际操作中，你需要将"""..."""中的内容替换为你自己的multi_agent_prototype.ipynb中的全部代码

refactoring_prompt = """
我有一个Jupyter Notebook，里面包含了构建一个多Agent系统的全部代码。
这个系统包含一个Supervisor Agent，一个Customer Service Agent和一个Finance Agent。
它使用了一些工具，比如查询订单信息。
它使用了LangGraph来构建工作流。
现在我想把它重构成一个专业的Python项目。

请为我完成以下任务：
1.  为这个项目设计一个清晰的目录结构。
2.  告诉我每个文件具体应该包含哪些代码（以Python代码块的形式给出）。
3.  特别注意，要将所有的密钥和模型名称等配置信息，都提取到一个单独的`config.py`文件中。
4.  创建一个`main.py`作为主入口，它应该能接收用户输入，并运行整个工作流。
5.  创建一个`requirements.txt`文件，列出可能的核心依赖。

这是我的全部代码：
\"\"\"
[把你multi_agent_prototype.ipynb中的所有代码粘贴到这里]
\"\"\"
"""

# print(refactoring_prompt) # 在实际使用中，你会将这个prompt发送给AI
```

运行这个Prompt后，AI会给你一份非常详细的重构方案，它几乎完成了80%的思考工作！它会告诉你`agents/finance_agent.py`里应该放什么，`main.py`应该如何组织，`config.py`里应该有哪些变量。

## 第二步：假设驱动的“代码搬家”

现在，我们有了一份完美的蓝图。我们的假设是：**如果严格遵循AI生成的蓝图进行代码迁移，我们就能得到一个结构清晰、易于维护的项目。**

验证这个假设的过程，就像是“按图索骥”式的代码搬家：

1.  **创建目录和文件**：根据AI建议的目录结构，在你的文件系统中创建对应的文件夹和空的`.py`文件。
2.  **复制粘贴**：将AI为每个文件生成的代码块，准确地复制粘贴到对应的空文件中。
3.  **微调与验证**：
    *   **检查import**：确保每个文件都正确地导入了它所需要的其他模块和库。例如，在`main.py`中，你需要从`agents.finance_agent`导入`FinanceAgent`类。
    *   **填充配置**：打开`config.py`，将你的真实API密钥等信息填入其中。
    *   **运行检查**：在终端中，进入项目根目录，运行 `python main.py`。它很可能会报错！但别担心，这是正常的。

## 第三步：与AI结对修复Bug

第一次运行时，几乎一定会因为一些路径问题、循环导入问题或环境问题而报错。这正是我们训练“AI协同解决Bug”能力的最佳时机。

**不要自己去Google错误！** 将完整的错误信息复制下来，粘贴到与AI的对话框中，问它：

> 我在运行重构后的`main.py`时，遇到了这个错误，请帮我分析原因并修复它。
>
> ```
> [粘贴你的完整错误信息]
> ```

通过几轮这样的“结对编程”，你将能快速修复所有问题，直到你的`main.py`成功运行，并像之前的Notebook一样，正确地处理用户请求。

## 本节小结

### 🎯 核心收获
- **AI辅助架构设计**：学会了如何利用AI来分析现有代码，并生成清晰、专业的重构蓝图。
- **软件工程实践**：将一个复杂的AI原型，成功重构为一个遵循模块化、单一职责原则的、可维护的Python项目。
- **AI协同调试**：掌握了与AI结对编程，快速定位并修复工程化过程中遇到的Bug的核心技能。
- **价值认知升维**：深刻体会了软件工程在AI项目从“能用”到“好用”乃至“可交付”过程中的核心价值。

### 🤔 下一步的思考
我们的项目现在拥有了清晰的结构，但它还只是一个能在后台运行的脚本。我们如何能让它像一个真正的软件一样，方便地被用户调用和交互呢？这正是我们在`challenge.qmd`中要去解决的下一个问题。
