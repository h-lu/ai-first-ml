# 19.4 Practice: 搭建你的第一个AI团队

理论和蓝图都已具备，让我们开始动手，用`LangGraph`构建这个由主管、客服、订单分析员和财务经理组成的AI团队。

::: {.callout-caution title="实践复杂度提示"}
本次实践的代码会比上一章复杂得多，因为它真实地反映了构建一个多Agent系统的全过程。请仔细跟随指令剧本，并随时准备向你的AI助手提问，以确保你理解了每一部分代码的用途。
:::

### AI协同实践：一个完整的多Agent系统搭建指令剧本

#### 第一幕：与AI一起创建Agent的"角色"和"工具"

::: {.callout-note title="第一步：请求AI编写团队的基础设施" icon="fas fa-users-cog"}

**你：** "你好AI助手，我们现在要构建一个多Agent的'退款处理团队'。请帮我编写这个团队的基础设施代码，包含以下几个部分："
> "1.  **创建Agent节点生成器**: 编写一个名为`create_agent_node`的函数。这个函数非常重要，它的作用是接收一个LLM和一个工具列表，然后返回一个封装好的、可以作为LangGraph节点的'Agent节点'。这个节点内部的逻辑应该和上一章的`call_model`类似，即调用LLM并返回结果。
> "2.  **创建专用工具**: 像上一章一样，为我们的专业Agent创建各自的工具。
>     *   `OrderAnalystToolbox`: 包含一个`get_order_history(customer_name: str)`方法，并用`@tool`装饰。其文档字符串应清晰说明用途，例如'用于根据顾客姓名查询其历史订单'。为了模拟，它可以返回一个写死的订单信息。
>     *   `FinanceManagerToolbox`: 包含一个`process_refund(amount: float, customer_name: str)`方法，同样需要`@tool`装饰和清晰的文档字符串。它可以返回一个表示退款成功的字符串。
> "3.  **创建团队成员**:
>     *   **定义LLM**: 初始化一个强大的LLM（如`ChatOpenAI(model="gpt-4-turbo")`）作为所有Agent的通用'大脑'。
>     *   **实例化Agent**: 利用第一步创建的`create_agent_node`函数，分别创建三个Agent节点：
>         *   `customer_service_agent`: 不给它绑定任何工具。
>         *   `order_analyst_agent`: 绑定`get_order_history`工具。
>         *   `finance_manager_agent`: 绑定`process_refund`工具。"
:::

#### 第二幕：指挥AI构建"主管-专员"的协作图

::: {.callout-note title="第二步：请求AI编写主管决策与图结构代码" icon="fas fa-network-wired"}
**你：** "团队成员已经创建好了。现在，请帮我编写最核心的'主管'决策逻辑，并用`LangGraph`将整个团队连接成一张协作网络。"

> "请继续编写代码，实现以下功能：
> 1.  **定义状态 (State)**: 创建一个比上一章更复杂的`TeamState`。它除了需要包含`messages`，还需要一个`next`字段，用来指示主管希望下一步将任务交给谁。
> 2.  **创建工具执行节点**: 创建一个`tool_node`。这个节点负责执行各个专业Agent所发起的工具调用请求。这和上一章的`call_tool`节点逻辑基本一致，但它需要能处理多个工具。
> 3.  **创建主管Agent (Supervisor)**: 这是核心！
>     a.  **定义主管选项**: 创建一个列表，包含所有可能的路由目标，即`["CustomerService", "OrderAnalyst", "FinanceManager", "FINISH"]`。
>     b.  **构建主管Prompt模板**: 创建一个精巧的Prompt模板。这个模板要告诉主管它的角色、团队成员的职责、以及可能的路由选项。最关键的是，它需要指示主管在思考后，必须调用一个名为`route`的函数，并传入它决定要路由给的下一个Agent的名字。
>     c.  **绑定路由函数**: 使用`.bind_tools()`将这个虚构的`route`函数（它是一个Pydantic模型）绑定到主管的LLM上。
>     d.  **创建主管节点**: 将绑定好工具的主管LLM封装成一个LangGraph节点。
> 4.  **构建图 (Graph)**:
>     a.  实例化一个`StateGraph`。
>     b.  添加我们创建的所有节点：主管、三个专业Agent、以及工具执行节点。
>     c.  **定义条件路由**: 添加从主管节点出发的条件边。路由的逻辑是：解析主管LLM返回的工具调用，看它要求路由到哪个Agent，然后就把流程导向对应的Agent节点。如果它决定`FINISH`，就结束流程。
>     d.  **定义普通边**: 将所有专业Agent节点和工具执行节点的出口，全部连接回主管节点，形成闭环。
>     e.  **设置入口**: 将主管节点设置为图的入口点。
>     f.  编译图，生成最终的可执行`app`。
> 5.  **运行并观察**: 调用`app.stream()`，传入一个复杂的退款请求，并打印出每一步的状态变化，观察任务是如何在不同Agent之间流转的。"

:::

---

本次的"指令剧本"无疑是全书迄今为止最复杂的一个，它不再是简单的线性流程，而是一个包含了角色定义、工具绑定、条件路由的完整"系统设计文档"。

请鼓起勇气，与你的AI助手一起，将这个宏大的蓝图变为现实。当代码成功运行，看着任务在你的AI团队中被精准地传递、处理时，你会体验到一种前所未有的、作为"AI团队架构师"的成就感。

## 本节小结

### 🎯 核心收获
- **主管-专员架构模式**: 你亲手实现了一个经典的多Agent协作架构。你理解了"主管（Supervisor）"作为任务路由器和"专员（Worker）"作为工具执行者的角色分工与协作流程。
- **LangGraph高级应用**: 你掌握了使用`LangGraph`构建复杂图的进阶技巧，包括定义包含多个Agent的节点、设计带有状态的条件路由（Conditional Edges），以及如何将所有Agent节点连接回主管，形成协作闭环。
- **系统设计思维**: 你不再只是思考"如何让一个Agent完成任务"，而是开始从系统设计的角度思考"如何将复杂任务分解给不同的Agent，并设计它们之间的协作流程"。

### 🤔 下一步的思考
- **团队的反思与进化**: 我们的AI团队现在能按固定流程工作了，但它还缺少了人类团队一个关键的能力：**反思与自我优化**。当一个任务处理得不好时，团队成员能否进行"复盘"，并优化未来的协作流程？
- **人类如何参与协作**: 在当前的流程中，一旦任务开始，就完全由AI团队自主运行，直到结束。但在许多高风险场景下（比如处理一笔超大额的退款），我们希望在最终决策执行前，能有一个"人类审批"的环节。我们如何将"人类"作为一个特殊的节点，无缝地嵌入到AI的自动化工作流中？

带着对"AI团队自我进化"和"人机协同"的思考，准备好迎接本书的终极挑战了吗？

</rewritten_file>