# 19.3 What: 多Agent协作流程图

::: {.callout-tip title="核心概念：多Agent协作流程图"}

在`How`篇中，我们与AI共同设计了一个包含"主管"和多个"专员"的"AI梦之队"架构。我们还探讨了如何用`LangGraph`将每个Agent看作一个"超级节点"，并通过"条件边"来实现主管的路由决策。

现在，让我们将这个设计思想，用一张清晰的流程图（Graph）固化下来。

下面就是我们即将构建的"AI退款处理团队"的简化版`LangGraph`流程图。这不仅是代码的蓝图，更是我们理解复杂协作模式的思维工具。

```{mermaid}
#| code-fold: false
#| fig-cap: "多Agent协作架构图：以主管为核心的智能路由"

graph TD
    subgraph "输入层"
        A["👤 用户请求<br/>'我要退款'"]
    end

    subgraph "决策层"
        B{"🧠 主管Agent (Router)<br/>分析请求，决定下一步"}
    end

    subgraph "执行层 (专员Agents)"
        C["🛠️ 客服Agent<br/>澄清用户问题"]
        D["🛠️ 订单Agent<br/>查询订单历史"]
        E["🛠️ 财务Agent<br/>执行退款操作"]
    end
    
    subgraph "输出层"
        F["🏁 任务完成<br/>向用户报告结果"]
    end
    
    subgraph "能力层 (工具)"
        T1["get_order_history()"]
        T2["process_refund()"]
    end

    A --> B
    B -- "路由至客服" --> C
    B -- "路由至订单" --> D
    B -- "路由至财务" --> E
    B -- "任务完成" --> F
    
    C -- "结果反馈" --> B
    D -- "结果反馈" --> B
    E -- "结果反馈" --> B
    
    D -.-> T1
    E -.-> T2
    
    %% Styling
    style A fill:#f9f9f9,stroke:#333
    style B fill:#fff3cd,stroke:#856404,stroke-width:2px
    
    style C fill:#e3f2fd,stroke:#1565c0
    style D fill:#e3f2fd,stroke:#1565c0
    style E fill:#e3f2fd,stroke:#1565c0
    
    style F fill:#d4edda,stroke:#155724
    
    style T1 fill:#f5f5f5,stroke:#999,stroke-dasharray: 5 5
    style T2 fill:#f5f5f5,stroke:#999,stroke-dasharray: 5 5
```

从这张图中我们可以清晰地看到：

*   **中央枢纽:** `主管Agent`是所有流程的中心。它的核心职责是"路由"，而不是"执行"。
*   **专业分工:** 每个`专员Agent`都有自己独立的、受限的任务和工具。这保证了系统的安全性和专业性。
*   **循环协作:** 所有专员完成工作后，都会将结果交还给`主管`进行下一步决策，形成一个"主管决策 -> 专员执行 -> 返回主管"的高效协作闭环。

在接下来的实践中，我们将用代码将这张蓝图变为现实。
::: 