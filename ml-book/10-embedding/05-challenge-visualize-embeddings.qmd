# 10.5 动手练习与挑战

我们已经学会了如何将句子转换为向量，并用余弦相似度来计算它们之间的关系。但是，当我们处理成百上千个句子时，单纯的数字就显得不够直观了。

所谓"一图胜千言"，我们能否将这些漂浮在高维空间中的向量"拍扁"到二维平面上，亲眼"看"到它们的聚类和分布呢？这正是本节的挑战。

---

::: {.callout-warning title="开放性挑战：指挥AI进行向量降维与可视化"}

你的任务是：**指挥你的AI编程助手，使用`scikit-learn`库中的`t-SNE`算法，对一组句向量进行降维，并使用`matplotlib`或`seaborn`将降维后的二维向量绘制成散点图。**

这是一个探索性的实践，旨在让你更直观地理解"语义空间"的概念。

**指令剧本大纲:**

你可以分步向AI提出指令，来完成这个挑战。

**第一步：准备数据**
> **👤 你的指令:**
> "请帮我创建一个包含10-15个句子的Python列表。这些句子应该可以明显地分成3-4个主题类别。例如：
> -   关于'太空探索'的几句话（如"火箭发射成功"、"宇航员登陆月球"）。
> -   关于'烹饪美食'的几句话（如"如何烤蛋糕"、"意大利面的做法"）。
> -   关于'编程技术'的几句话（如"Python是最好的语言"、"什么是API"）。
> -   以及一两个模棱两可、与其他类别都不太相关的句子。"

**第二步：向量化**
> **👤 你的指令:**
> "很好。现在，请使用我们已经加载的`all-MiniLM-L6-v2`模型，将这个列表中的所有句子都转换成句嵌入向量。"

**第三步：执行t-SNE降维**
> **👤 你的指令:**
> "接下来是关键的一步。请帮我从`sklearn.manifold`中导入`TSNE`。然后，创建一个`TSNE`实例，设置`n_components=2`（代表降到二维），`perplexity`可以设置在5左右（这是一个可以调整的超参数），并设置`random_state=42`以保证结果可复现。最后，请用这个实例对我们的句向量进行`fit_transform`，得到降维后的二维向量。"

**第四步：可视化绘图**
> **👤 你的指令:**
> "太棒了！我们现在有了二维坐标。请使用`matplotlib.pyplot`或`seaborn`，将这些二维向量绘制成一个散点图。
> 为了让图表更清晰，请在图中的每一个点旁边，用`plt.text()`或类似方法，标注出它所对应的原始句子的**关键词或序号**。这样我才能知道哪个点代表哪句话。"

**第五步：分析与思考 (自己完成)**
-   观察你生成的图表。属于同一个主题的句子，它们的点是不是在空间上聚集得更近？
-   那些模棱两可的句子，它们在图上的位置是在簇的边缘，还是在几个簇的中间？
-   尝试调整t-SNE的`perplexity`参数（例如，从5增加到15），重新运行代码，看看图的形态会发生什么变化。与AI讨论一下，这个参数可能意味着什么。

这个挑战将让你真正"看见"语义相似度，将抽象的向量运算，转化为直观的空间几何关系。
:::
