# 20.2 How: 与AI探讨可中断的工作流

::: {.callout-note title="与AI的探索之旅"}

**你：** "为Agent加入'人工审批'环节，这个想法太重要了。在LangGraph里，我们要怎么实现这种'暂停等待'的功能呢？听起来图一旦开始运行，就会一直跑到结束。"

**AI助手：** "你提出了一个关于`LangGraph`的精髓问题！`LangGraph`一个非常强大的特性就是它原生支持**可中断的 (Interruptible)** 操作。我们可以主动地在图的任意一个节点之后设置一个'断点'。"

**你：** "断点？就像在调试代码一样吗？"

**AI助手：** "完全可以这么理解！流程是这样的："
> "1.  **设置中断:** 我们在构建图的时候，可以指定在某个或某些节点执行完毕后，图的运行应该'**中断 (interrupt)**'。
> "2.  **保存快照:** 当图中断时，它会停下来，并把当前所有节点的'**状态快照 (State Snapshot)**'返回给你。这个快照包含了到目前为止的全部对话历史和所有信息。
> "3.  **人工决策:** 现在，你（人类）就介入了。你可以检查这个'快照'，看Agent团队到目前为止的工作成果。比如，你可以看到财务Agent正准备执行一笔退款。
> "4.  **继续执行:** 在你做出判断后（比如在终端里输入'yes'表示同意），你可以调用图的`continue`方法，并将你的'新指令'（比如一条表示'批准'的消息）连同之前的'状态快照'一起传回给图。
> "5.  **恢复运行:** 图接收到你的指令后，就会从刚才中断的地方，带着你新增的信息，继续往下运行。"

**你：** "哇，这个设计太优雅了！也就是说，我们只需要在'财务经理'这个Agent节点后面设置一个中断，就能实现人工审批了。具体在代码里，这个'中断'要怎么声明呢？"

**AI助手：** "非常简单。在我们编译图的时候，需要提供一个`checkpointer`（检查点工具），并可以在调用图的时候指定中断点。例如，我们可以告诉`LangGraph`：'在执行完任何一个工具之后，都请暂停'。这样就给了我们最精细的控制，让我们可以在任何一个Agent执行完它的工具后进行审批。"

::: 