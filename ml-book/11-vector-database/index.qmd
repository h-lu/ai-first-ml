# 第11章 构建你的记忆宫殿：向量数据库 {#sec-vector-db}

> "秩序，是所有事物的第一法则。"
>
> --- 亚历山大·蒲柏 (Alexander Pope), 英国诗人

在上一章，我们成功地将文档的"语义"提取并固化为了一系列的向量。这些向量，就是我们RAG系统的宝贵原材料。

现在，我们面临一个新的问题：如何**存储**和**管理**这些向量？

如果我们的知识库只有10篇文章，对应生成了几十个向量。当用户提问时，我们可以简单地将问题向量与这几十个文档向量一一比较，找到最相似的那个。这在计算上是完全可行的。

但如果我们的知识库是一个拥有数百万份文档的"国家图书馆"呢？它可能会对应生成数千万甚至上亿个向量。在这种规模下，进行一次完整的、暴力的两两比对，将会是一场计算的噩梦，耗时可能长达数小时甚至数天，用户根本无法忍受。

我们需要一个更聪明的"图书管理员"，一个专门为海量向量建立索引、并能实现毫秒级快速检索的系统。这个系统，就是**向量数据库 (Vector Database)**。

## 为什么需要专门的数据库来存储向量？

我们熟悉的传统数据库（如MySQL, PostgreSQL）是为结构化数据（如用户表、订单表）设计的，它们擅长的是精确匹配（`WHERE id = 123`）。而向量数据库，则是为非结构化的、高维的向量数据而生，它擅长的是**近似的相似度搜索 (Approximate Similarity Search)**。

它就像一个专门为我们构建的、基于语义的"记忆宫殿"。

## 项目成果预览

在本章结束时，你将完成我们RAG蓝图中"离线处理流程"的最后一步，并初步打通"在线查询流程"的核心环节。你将获得：
-   ✅ **一个可工作的向量索引**: 你将拥有一个存储了我们文档向量、并能被快速查询的本地向量数据库。
-   ✅ **一套完整的离线工作流**: 你打通了从"原始文档"到"可检索的向量索引"的全流程。
-   ✅ **一次成功的检索体验**: 你将成功地用一个问题，从自己构建的向量数据库中，检索出了最相关的文本块。

我们正在一步步地将蓝图变为现实。为我们的知识建立"记忆宫殿"，是让RAG机器人变得聪明的关键所在。让我们开始吧！ 