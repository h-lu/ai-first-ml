## 11.3 What: 核心概念——相似度度量与ANN算法

我们已经知道，向量数据库的核心是近似最近邻（ANN）搜索，它通过牺牲微小的精度来换取巨大的速度。现在，是时候深入其内部，理解两大技术基石了：
1.  **距离度量 (Distance Metric):** 我们用什么标准来判断向量之间的"远近"或"相似"？
2.  **ANN算法 (ANN Algorithm):** 向量数据库内部究竟有哪些巧妙的"索引"方法，来实现高效的"近似"查找？

::: {.callout-tip title="核心概念：余弦相似度 (Cosine Similarity)"}

在向量空间中，衡量两个向量之间"相似性"的方法有很多（如欧氏距离、曼哈顿距离等），但对于捕获语义信息的文本嵌入向量而言，**余弦相似度（Cosine Similarity）**是最常用且最直观的一种。

**它衡量的是什么？**

与直接测量两点间直线距离的欧氏距离不同，余弦相似度衡量的是两个向量在多维空间中的**方向一致性**。它的值介于 -1 和 1 之间：
*   **1：** 表示两个向量方向完全一致，语义高度相似。
*   **0：** 表示两个向量相互垂直（正交），语义不相关。
*   **-1：** 表示两个向量方向完全相反，语义对立。

**一个生动的类比：聚光灯的光束**
> 想象两束聚光灯，都从同一个点（原点）射出。
> -   如果两束光照向完全相同的方向，那它们的余弦相似度就是1。
> -   如果一束光照向舞台前方，另一束照向天花板，它们相互垂直，余弦相似度就是0。
> -   如果一束光照向前方，另一束照向后方，它们方向相反，余弦相似度就是-1。
>
> 重要的是光束的**方向**，而不是光束的**长度**（向量的模长）。这对于文本语义尤其重要，因为有时一长一短两段话，可能核心意思完全一样。

**数学公式 (仅供理解，无需记忆)：**
\[ \text{similarity} = \cos(\theta) = \frac{\mathbf{A} \cdot \mathbf{B}}{\|\mathbf{A}\| \|\mathbf{B}\|} = \frac{\sum_{i=1}^{n} A_i B_i}{\sqrt{\sum_{i=1}^{n} A_i^2} \sqrt{\sum_{i=1}^{n} B_i^2}} \]
其中，$A$ 和 $B$ 是两个向量。余弦相似度就是它们之间夹角 $\theta$ 的余弦值。

:::

::: {.callout-tip title="核心概念：近似最近邻 (ANN) 算法"}

ANN算法的核心思想是通过构建一种巧妙的数据结构（即**索引**），来避免在搜索时进行暴力比对。各种ANN算法策略繁多，但它们通常是以下几种核心思想的变体或组合：

1.  **哈希 (Hashing-based):**
    *   **思想：** 设计一个"哈希函数"，能将相似的向量以高概率映射到同一个"桶"里。查询时，只需将查询向量经过同一个哈希函数计算，然后在对应的"桶"里寻找即可。
    *   **代表算法：** **局部敏感哈希 (Locality-Sensitive Hashing, LSH)**。

2.  **树 (Tree-based):**
    *   **思想：** 递归地将整个向量空间划分成子空间，构建出一个树状的层级结构。查询时，从根节点出发，在树上进行高效的路径搜索，每次都选择进入与查询向量最相关的子空间，从而快速定位到目标区域。
    *   **代表算法：** **Annoy (Approximate Nearest Neighbors Oh Yeah)**，由Spotify开源。

3.  **量化 (Quantization-based):**
    *   **思想：** 这是一种"有损压缩"的思想。它将原始的、由高精度浮点数组成的向量，"量化"成由低精度整数或码本（Codebook）索引组成的紧凑编码。这极大地减小了存储空间，并能通过计算编码之间的距离来快速估算原始向量的距离。
    *   **代表算法：** **乘积量化 (Product Quantization, PQ)**。

4.  **图 (Graph-based):**
    *   **思想：** 将数据集中的每个向量看作图上的一个节点。在构建索引时，为每个节点找到它的若干个"最近邻"，并在它们之间建立边，形成一个"近邻图"。查询时，从一个或多个入口节点开始，沿着图的边在邻居之间"游走"，逐步逼近查询目标。
    *   **代表算法：** **分层可导航小世界图 (Hierarchical Navigable Small World, HNSW)**。它在速度和精度之间取得了非常好的平衡，是目前非常流行的ANN算法。

这些算法的实现细节非常复杂，但幸运的是，我们不需要从零开始创造它们。像 **Faiss** (由Facebook AI开发) 这样的开源库，以及 **ChromaDB**, **Milvus** 这样的向量数据库产品，已经为我们封装好了这些强大的ANN索引能力。

:::

通过对余弦相似度和各种ANN算法核心思想的理解，你现在已经掌握了向量数据库的理论基石。在下一节，我们将亲自动手，使用一个轻量级的向量数据库核心库(Faiss)，将我们之前生成的文本向量存储起来，并体验如何进行高效的语义检索。 